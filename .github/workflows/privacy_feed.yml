name: CMC Privacy – Fetch, Compare, Charts (08/14/20 Asia/Nicosia)

on:
  schedule:
    # רץ ב-06:00, 12:00, 18:00 UTC  (≈ 08/14/20 Asia/Nicosia ברוב השנה)
    - cron: '0 6,12,18 * * *'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install requests matplotlib pandas

      - name: Fetch CMC Privacy basket → build latest.json/csv + charts
        env:
          CMC_API_KEY: ${{ secrets.CMC_API_KEY }}
        run: |
          python - << 'PY'
          import os, json, time, math, pathlib, io
          from datetime import datetime, timezone
          from zoneinfo import ZoneInfo
          import requests
          import pandas as pd
          import matplotlib.pyplot as plt

          # -----------------------------
          # CONFIG
          # -----------------------------
          CMC_API_KEY = os.environ.get("CMC_API_KEY")
          if not CMC_API_KEY:
            raise SystemExit("Missing CMC_API_KEY secret.")

          # סל המטבעות הקבוע
          SYMBOLS = ["XMR","ZEC","BDX","DASH","ZANO","ROSE","SCRT","XVG","PIVX","FIRO","ARRR","BEAM"]

          # קבצים שנוצר/נעדכן בריפו
          LATEST_JSON = "latest.json"      # כמו שכבר עבדת עד עכשיו
          PREV_JSON   = "prev.json"        # נשמור עותק להשוואה
          LATEST_CSV  = "latest.csv"       # נוח לגיבוי/פתיחה אקסל
          CHART_DIR   = "charts"           # תיקייה לגרפים

          pathlib.Path(CHART_DIR).mkdir(exist_ok=True)

          # -----------------------------
          # Helper: CMC quotes/latest (free plan → 1 convert per call)
          # -----------------------------
          BASE = "https://pro-api.coinmarketcap.com/v2/cryptocurrency/quotes/latest"
          HDRS = {"X-CMC_PRO_API_KEY": CMC_API_KEY}

          def fetch_quotes(symbols, convert="USD"):
            params = {
              "symbol": ",".join(symbols),
              "convert": convert
            }
            r = requests.get(BASE, headers=HDRS, params=params, timeout=30)
            if r.status_code != 200:
              raise SystemExit(f"CMC error {r.status_code}: {r.text[:250]}")
            j = r.json()
            if "data" not in j:
              raise SystemExit(f"Unexpected CMC payload: {j}")
            return j["data"]

          # 1) מחזירים USD (market_cap, volume_24h, USD price)
          data_usd = fetch_quotes(SYMBOLS, "USD")

          # 2) מחזירים BTC (price in BTC)
          # (מגבלת התוכנית החינמית לא מאפשרת 2 המרות בקריאה אחת)
          time.sleep(1.0)  # נימוס קל בין הקריאות
          data_btc = fetch_quotes(SYMBOLS, "BTC")

          # -----------------------------
          # Build clean snapshot
          # -----------------------------
          snapshot = {"timestamp": datetime.now(timezone.utc).isoformat(timespec="seconds"),
                      "coins": {}}

          for sym in SYMBOLS:
            if sym not in data_usd or sym not in data_btc:
              continue
            # חלק מה-assets מחזירים מערך (גרסאות שונות); נבחר האייטם הראשון
            usd_obj = data_usd[sym][0]
            btc_obj = data_btc[sym][0]
            q_usd = usd_obj["quote"]["USD"]
            q_btc = btc_obj["quote"]["BTC"]

            # יש פרויקטים (לדוגמה ZANO) שלפעמים מחזירים 0 במרקט קאפ (חוסר נתונים)
            mcap = float(q_usd.get("market_cap") or 0.0)
            vol  = float(q_usd.get("volume_24h") or 0.0)
            usd_price = float(q_usd.get("price") or 0.0)
            btc_price = float(q_btc.get("price") or 0.0)

            snapshot["coins"][sym] = {
              "USD_price": usd_price,
              "BTC_price": btc_price,
              "market_cap": mcap,
              "volume_24h": vol
            }

          # -----------------------------
          # Compute sector totals + shares
          # -----------------------------
          def totals_and_shares(snap):
            coins = snap["coins"]
            sector_mcap = sum(c["market_cap"] for c in coins.values() if c["market_cap"]>0)
            sector_vol  = sum(c["volume_24h"] for c in coins.values() if c["volume_24h"]>0)
            shares = {}
            for k,v in coins.items():
              mc_share = (v["market_cap"]/sector_mcap) if sector_mcap>0 else 0.0
              vo_share = (v["volume_24h"]/sector_vol) if sector_vol>0 else 0.0
              shares[k] = {"mcap_share": mc_share, "vol_share": vo_share}
            return sector_mcap, sector_vol, shares

          # Load previous snapshot if exists
          prev = None
          if os.path.exists(LATEST_JSON):
            try:
              with open(LATEST_JSON, "r", encoding="utf-8") as f:
                prev = json.load(f)
              # נשמור העתק מפורש כ-prev.json
              with open(PREV_JSON, "w", encoding="utf-8") as f:
                json.dump(prev, f, ensure_ascii=False, indent=2)
            except Exception as e:
              prev = None

          # totals + shares (now)
          sector_mcap_now, sector_vol_now, shares_now = totals_and_shares(snapshot)

          # totals + shares (previous)
          shares_prev = {}
          sector_mcap_prev = sector_vol_prev = None
          if prev:
            try:
              sector_mcap_prev, sector_vol_prev, shares_prev = totals_and_shares(prev)
            except Exception:
              shares_prev = {}

          # מצרפים לשנפשוט שדות סכימה
          snapshot["sector_totals"] = {
            "market_cap_sum": sector_mcap_now,
            "volume_24h_sum": sector_vol_now
          }
          snapshot["shares"] = shares_now

          # -----------------------------
          # Save latest.json + csv
          # -----------------------------
          with open(LATEST_JSON, "w", encoding="utf-8") as f:
            json.dump(snapshot, f, ensure_ascii=False, indent=2)

          # CSV טבלאי
          rows = []
          for sym, v in snapshot["coins"].items():
            rows.append({
              "symbol": sym,
              "USD_price": v["USD_price"],
              "BTC_price": v["BTC_price"],
              "market_cap": v["market_cap"],
              "volume_24h": v["volume_24h"],
              "mcap_share": snapshot["shares"][sym]["mcap_share"],
              "vol_share": snapshot["shares"][sym]["vol_share"]
            })
          df = pd.DataFrame(rows).sort_values("mcap_share", ascending=False)
          df.to_csv(LATEST_CSV, index=False)

          # -----------------------------
          # Build 4 charts (PNG)
          # -----------------------------
          # 1) Market-Cap Pie
          plt.figure()
          labels = []
          sizes = []
          for sym in SYMBOLS:
            if sym in snapshot["coins"] and snapshot["coins"][sym]["market_cap"]>0:
              labels.append(sym)
              sizes.append(snapshot["coins"][sym]["market_cap"])
          if sum(sizes) > 0:
            plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140)
            plt.title("Market-Cap Share (Privacy Basket)")
            plt.tight_layout()
            plt.savefig(f"{CHART_DIR}/market_cap_pie.png", dpi=160)
          plt.close()

          # 2) 24h Volume Bars
          plt.figure()
          xs = []
          ys = []
          for sym in SYMBOLS:
            if sym in snapshot["coins"]:
              xs.append(sym)
              ys.append(snapshot["coins"][sym]["volume_24h"])
          plt.bar(xs, ys)
          plt.title("24h Volume (USD)")
          plt.xticks(rotation=45, ha="right")
          plt.tight_layout()
          plt.savefig(f"{CHART_DIR}/volume_24h_bars.png", dpi=160)
          plt.close()

          # 3) Money-Flow Map (Delta shares vs prev) – נציג כעמודות דלתא
          if prev and "shares" in prev:
            delta = []
            labels = []
            for sym in SYMBOLS:
              now = shares_now.get(sym, {"mcap_share":0,"vol_share":0})
              before = shares_prev.get(sym, {"mcap_share":0,"vol_share":0})
              d = (now["mcap_share"] - before["mcap_share"]) + (now["vol_share"] - before["vol_share"])
              delta.append(d*100)  # לאחוזים
              labels.append(sym)
            plt.figure()
            colors = ["green" if d>=0 else "red" for d in delta]
            plt.bar(labels, delta, color=colors)
            plt.axhline(0, linewidth=1)
            plt.title("Money-Flow Map: Δ Share (mcap+volume) vs prev run (pp)")
            plt.xticks(rotation=45, ha="right")
            plt.ylabel("percentage points")
            plt.tight_layout()
            plt.savefig(f"{CHART_DIR}/money_flow_map.png", dpi=160)
            plt.close()

          # 4) Sector Trend Meter – ניקח יחס ווליום/מרקטקאפ מול ממוצע היסטורי קצר
          #    (אם אין prev → נחשב רק נקודה נוכחית)
          def trend_score(mcap_sum, vol_sum):
            # proxy גס: turnover = vol/mcap; ידידותי לסקטור
            return (vol_sum/mcap_sum)*100 if mcap_sum>0 else 0.0

          score_now = trend_score(sector_mcap_now, sector_vol_now)
          score_prev = trend_score(sector_mcap_prev, sector_vol_prev) if prev else None
          snapshot["trend_meter"] = {"turnover_pct_now": score_now, "turnover_pct_prev": score_prev}

          # מציירים מחוג פשוט: נעשה בר כ־0–100
          plt.figure(figsize=(4,1.0))
          plt.barh(["turnover%"], [min(score_now,100.0)])
          plt.xlim(0,100)
          plt.title("Sector Trend Meter (turnover %)")
          plt.tight_layout()
          plt.savefig(f"{CHART_DIR}/sector_trend_meter.png", dpi=160)
          plt.close()

          # סוף
          print("OK – latest.json/csv + charts created.")
          PY

      - name: Commit & Push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "Auto: update latest.json/csv + charts" || echo "No changes"
          git push
